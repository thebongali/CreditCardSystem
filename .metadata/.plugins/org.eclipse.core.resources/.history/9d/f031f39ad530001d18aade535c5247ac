package com.capgemini.creditcardsystem.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.capgemini.creditcardsystem.dto.CustomerDto;
import com.capgemini.creditcardsystem.service.CustomerService;

@RestController
@RequestMapping("/customerapi")
public class CustomerController {
	
	@Autowired
	private CustomerService customerService;
	
	@GetMapping("/customers")
	public ResponseEntity<List<CustomerDto>> getAllCustomers(){
		
		List<CustomerDto> customers = null;
		ResponseEntity<List<CustomerDto>> allCustomers = null;
		
		try {
			customers = customerService.getAllCustomers();
			if(!customers.isEmpty()) {
				allCustomers = new ResponseEntity<>(customers,HttpStatus.FOUND);
			}
			else {
				allCustomers = new ResponseEntity<>(customers,HttpStatus.NO_CONTENT);
			}
		} catch (Exception e) {
			allCustomers = new ResponseEntity<>(customers,HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return allCustomers;
	}
	
	@GetMapping("/customers/{customerId}")
	public ResponseEntity<CustomerDto> getCustomerById(@PathVariable int customerId) {
		
		CustomerDto customer = null;
		ResponseEntity<CustomerDto> cust = null;
		try {
			customer = customerService.getCustomerById(customerId);
			if(customer != null) {
				cust = new ResponseEntity<>(customer,HttpStatus.FOUND);
			}
			else {
				cust = new ResponseEntity<>(customer,HttpStatus.NOT_FOUND);
			}
		}catch (Exception e) {
			cust = new ResponseEntity<>(customer,HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return cust;
	}
	
	@PostMapping("/customers")
	public ResponseEntity<CustomerDto> addCustomer(@RequestBody CustomerDto dto){
		
		return new ResponseEntity<CustomerDto>(customerService.addCustomer(dto), HttpStatus.CREATED);
	}
	
	public ResponseEntity<CustomerDto> deleteCustomer(int customerId){
		CustomerDto customer = null;
		ResponseEntity<String> cust = null;
		
		try {
			if(customer != null) {
				cust = new ResponseEntity<String>(customerService.deleteCustomer(customerId),HttpStatus.NO_CONTENT);
			}
			else {
				cust = new ResponseEntity<String>("Customer with Id"+customerId+" not found",HttpStatus.NOT_FOUND);
			}
		}catch (Exception e) {
			cust = new ResponseEntity<String>("Internal Server Error",HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return null;
		
	}

}











